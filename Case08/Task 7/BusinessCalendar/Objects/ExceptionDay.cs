//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IIS.BusinessCalendar
{
    using System;
    using System.Xml;
    using ICSSoft.STORMNET.Business;
    using ICSSoft.STORMNET;
    
    
    // *** Start programmer edit section *** (Using statements)
    using System.Linq;
    // *** End programmer edit section *** (Using statements)


    /// <summary>
    /// Exception day.
    /// </summary>
    // *** Start programmer edit section *** (ExceptionDay CustomAttributes)

    // *** End programmer edit section *** (ExceptionDay CustomAttributes)
    [BusinessServer("IIS.BusinessCalendar.BusinessServer, BusinessCalendar(BusinessServers)", ICSSoft.STORMNET.Business.DataServiceObjectEvents.OnAllEvents)]
    [AutoAltered()]
    [Caption("Exception day")]
    [AccessType(ICSSoft.STORMNET.AccessType.none)]
    [View("ExceptionDayE", new string[] {
            "Name as \'Название\'",
            "DayType as \'Тип дня\'",
            "RecurrenceType as \'Тип повторения\'",
            "RepeatStep as \'Шаг повторения\'",
            "StartDate as \'Дата начала\'",
            "EndDate as \'Дата окончания\'",
            "RecurrenceCount as \'Количество повторений\'",
            "WorkTimeSpans as \'Временные промежутки\'",
            "Calendar as \'Календарь\'",
            "Calendar.Name as \'Название календаря\'",
            "WorkTimeDefinition as \'Определение рабочего времени\'",
            "WorkTimeDefinition.SumTime as \'Сумма рабочего времени\'"}, Hidden=new string[] {
            "Calendar",
            "Calendar.Name",
            "WorkTimeDefinition",
            "WorkTimeDefinition.SumTime"})]
    [MasterViewDefineAttribute("ExceptionDayE", "Calendar", ICSSoft.STORMNET.LookupTypeEnum.Combo, "", "Name")]
    [View("ExceptionDayL", new string[] {
            "Name as \'Название\'",
            "DayType as \'Тип дня\'",
            "RecurrenceType as \'Тип повторения\'",
            "RepeatStep as \'Шаг повторения\'",
            "StartDate as \'Дата начала\'",
            "EndDate as \'Дата окончания\'",
            "RecurrenceCount as \'Количество повторений\'",
            "WorkTimeSpans as \'Временные промежутки\'",
            "Calendar",
            "Calendar.Name as \'Название\'",
            "WorkTimeDefinition.SumTime as \'Сумма рабочего времени\'"}, Hidden=new string[] {
            "WorkTimeSpans",
            "Calendar",
            "Calendar.Name",
            "WorkTimeDefinition.SumTime"})]
    public class ExceptionDay : ICSSoft.STORMNET.DataObject
    {
        
        private string fName;
        
        private IIS.BusinessCalendar.DayType fDayType;
        
        private IIS.BusinessCalendar.RecurrenceType fRecurrenceType;
        
        private int fRepeatStep;
        
        private System.DateTime fStartDate;
        
        private System.DateTime fEndDate;
        
        private int fRecurrenceCount;
        
        private IIS.BusinessCalendar.WorkTimeDefinition fWorkTimeDefinition;
        
        private IIS.BusinessCalendar.Calendar fCalendar;
        
        // *** Start programmer edit section *** (ExceptionDay CustomMembers)
        private System.Collections.Generic.List<TimeSpan> fWorkTimeSpans;

        /// <summary>
        /// Метод возвращает "День-исключение" без циклических ссылок
        /// </summary>
        /// <returns></returns>
        public ExcDay ToShort()
         { 
             return new ExcDay()
             { 
                 PrimaryKey = this.__PrimaryKey.ToString(), 
                 StartDate = this.StartDate.Subtract(new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)).TotalMilliseconds, 
                 EndDate = this.EndDate.Subtract(new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)).TotalMilliseconds, 
                 RecurrenceCount = this.RecurrenceCount, 
                 RepeatStep = this.RepeatStep, 
                 RecurrenceType = this.RecurrenceType.ToString(), 
                 Name = this.Name 
             }; 
         }

        // *** End programmer edit section *** (ExceptionDay CustomMembers)

        
        /// <summary>
        /// Name.
        /// </summary>
        // *** Start programmer edit section *** (ExceptionDay.Name CustomAttributes)

        // *** End programmer edit section *** (ExceptionDay.Name CustomAttributes)
        [StrLen(255)]
        public virtual string Name
        {
            get
            {
                // *** Start programmer edit section *** (ExceptionDay.Name Get start)

                // *** End programmer edit section *** (ExceptionDay.Name Get start)
                string result = this.fName;
                // *** Start programmer edit section *** (ExceptionDay.Name Get end)

                // *** End programmer edit section *** (ExceptionDay.Name Get end)
                return result;
            }
            set
            {
                // *** Start programmer edit section *** (ExceptionDay.Name Set start)

                // *** End programmer edit section *** (ExceptionDay.Name Set start)
                this.fName = value;
                // *** Start programmer edit section *** (ExceptionDay.Name Set end)

                // *** End programmer edit section *** (ExceptionDay.Name Set end)
            }
        }
        
        /// <summary>
        /// DayType.
        /// </summary>
        // *** Start programmer edit section *** (ExceptionDay.DayType CustomAttributes)

        // *** End programmer edit section *** (ExceptionDay.DayType CustomAttributes)
        public virtual IIS.BusinessCalendar.DayType DayType
        {
            get
            {
                // *** Start programmer edit section *** (ExceptionDay.DayType Get start)

                // *** End programmer edit section *** (ExceptionDay.DayType Get start)
                IIS.BusinessCalendar.DayType result = this.fDayType;
                // *** Start programmer edit section *** (ExceptionDay.DayType Get end)

                // *** End programmer edit section *** (ExceptionDay.DayType Get end)
                return result;
            }
            set
            {
                // *** Start programmer edit section *** (ExceptionDay.DayType Set start)

                // *** End programmer edit section *** (ExceptionDay.DayType Set start)
                this.fDayType = value;
                // *** Start programmer edit section *** (ExceptionDay.DayType Set end)

                // *** End programmer edit section *** (ExceptionDay.DayType Set end)
            }
        }
        
        /// <summary>
        /// RecurrenceType.
        /// </summary>
        // *** Start programmer edit section *** (ExceptionDay.RecurrenceType CustomAttributes)

        // *** End programmer edit section *** (ExceptionDay.RecurrenceType CustomAttributes)
        public virtual IIS.BusinessCalendar.RecurrenceType RecurrenceType
        {
            get
            {
                // *** Start programmer edit section *** (ExceptionDay.RecurrenceType Get start)

                // *** End programmer edit section *** (ExceptionDay.RecurrenceType Get start)
                IIS.BusinessCalendar.RecurrenceType result = this.fRecurrenceType;
                // *** Start programmer edit section *** (ExceptionDay.RecurrenceType Get end)
    
                // *** End programmer edit section *** (ExceptionDay.RecurrenceType Get end)
                return result;
            }
            set
            {
                // *** Start programmer edit section *** (ExceptionDay.RecurrenceType Set start)

                // *** End programmer edit section *** (ExceptionDay.RecurrenceType Set start)
                this.fRecurrenceType = value;
                // *** Start programmer edit section *** (ExceptionDay.RecurrenceType Set end)

                // *** End programmer edit section *** (ExceptionDay.RecurrenceType Set end)
            }
        }
        
        /// <summary>
        /// RepeatStep.
        /// </summary>
        // *** Start programmer edit section *** (ExceptionDay.RepeatStep CustomAttributes)

        // *** End programmer edit section *** (ExceptionDay.RepeatStep CustomAttributes)
        public virtual int RepeatStep
        {
            get
            {
                // *** Start programmer edit section *** (ExceptionDay.RepeatStep Get start)

                // *** End programmer edit section *** (ExceptionDay.RepeatStep Get start)
                int result = this.fRepeatStep;
                // *** Start programmer edit section *** (ExceptionDay.RepeatStep Get end)

                // *** End programmer edit section *** (ExceptionDay.RepeatStep Get end)
                return result;
            }
            set
            {
                // *** Start programmer edit section *** (ExceptionDay.RepeatStep Set start)

                // *** End programmer edit section *** (ExceptionDay.RepeatStep Set start)
                this.fRepeatStep = value;
                // *** Start programmer edit section *** (ExceptionDay.RepeatStep Set end)

                // *** End programmer edit section *** (ExceptionDay.RepeatStep Set end)
            }
        }
        
        /// <summary>
        /// StartDate.
        /// </summary>
        // *** Start programmer edit section *** (ExceptionDay.StartDate CustomAttributes)

        // *** End programmer edit section *** (ExceptionDay.StartDate CustomAttributes)
        public virtual System.DateTime StartDate
        {
            get
            {
                // *** Start programmer edit section *** (ExceptionDay.StartDate Get start)

                // *** End programmer edit section *** (ExceptionDay.StartDate Get start)
                System.DateTime result = this.fStartDate;
                // *** Start programmer edit section *** (ExceptionDay.StartDate Get end)

                // *** End programmer edit section *** (ExceptionDay.StartDate Get end)
                return result;
            }
            set
            {
                // *** Start programmer edit section *** (ExceptionDay.StartDate Set start)

                // *** End programmer edit section *** (ExceptionDay.StartDate Set start)
                this.fStartDate = value;
                // *** Start programmer edit section *** (ExceptionDay.StartDate Set end)

                // *** End programmer edit section *** (ExceptionDay.StartDate Set end)
            }
        }
        
        /// <summary>
        /// EndDate.
        /// </summary>
        // *** Start programmer edit section *** (ExceptionDay.EndDate CustomAttributes)

        // *** End programmer edit section *** (ExceptionDay.EndDate CustomAttributes)
        public virtual System.DateTime EndDate
        {
            get
            {
                // *** Start programmer edit section *** (ExceptionDay.EndDate Get start)

                // *** End programmer edit section *** (ExceptionDay.EndDate Get start)
                System.DateTime result = this.fEndDate;
                // *** Start programmer edit section *** (ExceptionDay.EndDate Get end)

                // *** End programmer edit section *** (ExceptionDay.EndDate Get end)
                return result;
            }
            set
            {
                // *** Start programmer edit section *** (ExceptionDay.EndDate Set start)

                // *** End programmer edit section *** (ExceptionDay.EndDate Set start)
                this.fEndDate = value;
                // *** Start programmer edit section *** (ExceptionDay.EndDate Set end)

                // *** End programmer edit section *** (ExceptionDay.EndDate Set end)
            }
        }
        
        /// <summary>
        /// RecurrenceCount.
        /// </summary>
        // *** Start programmer edit section *** (ExceptionDay.RecurrenceCount CustomAttributes)

        // *** End programmer edit section *** (ExceptionDay.RecurrenceCount CustomAttributes)
        public virtual int RecurrenceCount
        {
            get
            {
                // *** Start programmer edit section *** (ExceptionDay.RecurrenceCount Get start)

                // *** End programmer edit section *** (ExceptionDay.RecurrenceCount Get start)
                int result = this.fRecurrenceCount;
                // *** Start programmer edit section *** (ExceptionDay.RecurrenceCount Get end)

                // *** End programmer edit section *** (ExceptionDay.RecurrenceCount Get end)
                return result;
            }
            set
            {
                // *** Start programmer edit section *** (ExceptionDay.RecurrenceCount Set start)

                // *** End programmer edit section *** (ExceptionDay.RecurrenceCount Set start)
                this.fRecurrenceCount = value;
                // *** Start programmer edit section *** (ExceptionDay.RecurrenceCount Set end)

                // *** End programmer edit section *** (ExceptionDay.RecurrenceCount Set end)
            }
        }
        
        /// <summary>
        /// WorkTimeSpans.
        /// </summary>
        // *** Start programmer edit section *** (ExceptionDay.WorkTimeSpans CustomAttributes)

        // *** End programmer edit section *** (ExceptionDay.WorkTimeSpans CustomAttributes)
        [ICSSoft.STORMNET.NotStored()]
        public virtual System.Collections.Generic.List<TimeSpan> WorkTimeSpans
        {
            get
            {
                // *** Start programmer edit section *** (ExceptionDay.WorkTimeSpans Get)
                if (fWorkTimeSpans == null)
                {
                    if (!(WorkTimeDefinition == null))
                    {
                        ICSSoft.STORMNET.Business.DataServiceProvider.DataService.LoadObject(WorkTimeDefinition.Views.WorkTimeDefinitionE, this.WorkTimeDefinition, false, false);
                        this.fWorkTimeSpans = Converter.convertWorkTimeSpans(this.WorkTimeDefinition.WorkTimeSpan.Cast<WorkTimeSpan>().ToList());
                    }
                    else
                    {
                        fWorkTimeSpans = new System.Collections.Generic.List<TimeSpan>();
                    }
                }
                return fWorkTimeSpans;
                // *** End programmer edit section *** (ExceptionDay.WorkTimeSpans Get)
            }
            set
            {
                // *** Start programmer edit section *** (ExceptionDay.WorkTimeSpans Set)
                this.fWorkTimeSpans = value;
                // *** End programmer edit section *** (ExceptionDay.WorkTimeSpans Set)
            }
        }
        
        /// <summary>
        /// Exception day.
        /// </summary>
        // *** Start programmer edit section *** (ExceptionDay.WorkTimeDefinition CustomAttributes)

        // *** End programmer edit section *** (ExceptionDay.WorkTimeDefinition CustomAttributes)
        public virtual IIS.BusinessCalendar.WorkTimeDefinition WorkTimeDefinition
        {
            get
            {
                // *** Start programmer edit section *** (ExceptionDay.WorkTimeDefinition Get start)

                // *** End programmer edit section *** (ExceptionDay.WorkTimeDefinition Get start)
                IIS.BusinessCalendar.WorkTimeDefinition result = this.fWorkTimeDefinition;
                // *** Start programmer edit section *** (ExceptionDay.WorkTimeDefinition Get end)

                // *** End programmer edit section *** (ExceptionDay.WorkTimeDefinition Get end)
                return result;
            }
            set
            {
                // *** Start programmer edit section *** (ExceptionDay.WorkTimeDefinition Set start)

                // *** End programmer edit section *** (ExceptionDay.WorkTimeDefinition Set start)
                this.fWorkTimeDefinition = value;
                // *** Start programmer edit section *** (ExceptionDay.WorkTimeDefinition Set end)

                // *** End programmer edit section *** (ExceptionDay.WorkTimeDefinition Set end)
            }
        }
        
        /// <summary>
        /// Exception day.
        /// </summary>
        // *** Start programmer edit section *** (ExceptionDay.Calendar CustomAttributes)

        // *** End programmer edit section *** (ExceptionDay.Calendar CustomAttributes)
        [PropertyStorage(new string[] {
                "Calendar"})]
        [NotNull()]
        public virtual IIS.BusinessCalendar.Calendar Calendar
        {
            get
            {
                // *** Start programmer edit section *** (ExceptionDay.Calendar Get start)

                // *** End programmer edit section *** (ExceptionDay.Calendar Get start)
                IIS.BusinessCalendar.Calendar result = this.fCalendar;
                // *** Start programmer edit section *** (ExceptionDay.Calendar Get end)

                // *** End programmer edit section *** (ExceptionDay.Calendar Get end)
                return result;
            }
            set
            {
                // *** Start programmer edit section *** (ExceptionDay.Calendar Set start)

                // *** End programmer edit section *** (ExceptionDay.Calendar Set start)
                this.fCalendar = value;
                // *** Start programmer edit section *** (ExceptionDay.Calendar Set end)

                // *** End programmer edit section *** (ExceptionDay.Calendar Set end)
            }
        }
        
        /// <summary>
        /// Class views container.
        /// </summary>
        public class Views
        {
            
            /// <summary>
            /// "ExceptionDayE" view.
            /// </summary>
            public static ICSSoft.STORMNET.View ExceptionDayE
            {
                get
                {
                    return ICSSoft.STORMNET.Information.GetView("ExceptionDayE", typeof(IIS.BusinessCalendar.ExceptionDay));
                }
            }
            
            /// <summary>
            /// "ExceptionDayL" view.
            /// </summary>
            public static ICSSoft.STORMNET.View ExceptionDayL
            {
                get
                {
                    return ICSSoft.STORMNET.Information.GetView("ExceptionDayL", typeof(IIS.BusinessCalendar.ExceptionDay));
                }
            }
        }
    }
}
