//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IIS.BusinessCalendar
{
    using System;
    using System.Xml;


    // *** Start programmer edit section *** (Using statements)
    using System.Collections.Generic;
    using System.Linq;
    using ICSSoft.STORMNET;
    using ICSSoft.STORMNET.Business;
    using ICSSoft.STORMNET.Business.LINQProvider;
    // *** End programmer edit section *** (Using statements)


    /// <summary>
    /// Business server.
    /// </summary>
    // *** Start programmer edit section *** (BusinessServer CustomAttributes)

    // *** End programmer edit section *** (BusinessServer CustomAttributes)
    [ICSSoft.STORMNET.AccessType(ICSSoft.STORMNET.AccessType.none)]
    public class BusinessServer : ICSSoft.STORMNET.Business.BusinessServer
    {
        
        // *** Start programmer edit section *** (BusinessServer CustomMembers)

        // *** End programmer edit section *** (BusinessServer CustomMembers)

        
        // *** Start programmer edit section *** (OnUpdateExceptionDay CustomAttributes)
        /// <summary>
        /// Обработчик события сохранения дня-исключения
        /// </summary>
        /// <param name="UpdatedObject">редактируемый день-исключение</param>
        /// <returns></returns>
        // *** End programmer edit section *** (OnUpdateExceptionDay CustomAttributes)
        public virtual ICSSoft.STORMNET.DataObject[] OnUpdateExceptionDay(IIS.BusinessCalendar.ExceptionDay UpdatedObject)
        {
            // *** Start programmer edit section *** (OnUpdateExceptionDay)
            

            switch (UpdatedObject.GetStatus())
            {
                case ObjectStatus.Created:
                    {
                        fillWorkTimeDefinition(UpdatedObject);
                        
                    }
                    break;
                case ObjectStatus.Deleted:
                    {
                        deleteExsTimeSpans(UpdatedObject);
                    }
                    break;
                case ObjectStatus.UnAltered:
                    {
                        
                    }
                    break;
                case ObjectStatus.Altered:
                    {
                        deleteExsTimeSpans(UpdatedObject);
                        fillWorkTimeDefinition(UpdatedObject);
                    }
                    break;
                default:
                    break;
            }

            return new ICSSoft.STORMNET.DataObject[0];
            // *** End programmer edit section *** (OnUpdateExceptionDay)
        }

        /// <summary>
        /// Метод заполняет временные промежутки для дня исключения
        /// </summary>
        /// <param name="updatedObject">Изменяемый день-исключение</param>
        private void fillWorkTimeDefinition(IIS.BusinessCalendar.ExceptionDay updatedObject)
        {
            List<TimeSpan> wtss = updatedObject.WorkTimeSpans;
            if (wtss != null)
            {
                using (var ds = (SQLDataService)DataServiceProvider.DataService)
                {
                    if (updatedObject.WorkTimeDefinition == null)
                    {
                        WorkTimeDefinition wtd = new WorkTimeDefinition();
                        ds.UpdateObject(wtd);
                    }
                    List<DataObject> wtsList = new List<DataObject>();

                    foreach (TimeSpan ts in wtss)
                    {
                        WorkTimeSpan wts = new WorkTimeSpan();
                        wts.StartTime = (decimal)(ts.StartTimeH + ts.StartTimeM);
                        wts.EndTime = (decimal)(ts.EndTimeH + ts.EndTimeM);
                        wts.WorkTimeDefinition = updatedObject.WorkTimeDefinition;
                        wtsList.Add(wts);
                    }
                    var dataObjects = wtsList.ToArray();
                    ds.UpdateObjects(ref dataObjects);
                }
            }
            else
            {
                updatedObject.WorkTimeDefinition = null;
            }
        }

        /// <summary>
        /// Метод удаляет временные промежутки, которые уже храняться в базе данных
        /// </summary>
        /// <param name="updatedObject">Изменяемый день-исключение</param>
        private void deleteExsTimeSpans(IIS.BusinessCalendar.ExceptionDay updatedObject)
        {
            if(updatedObject.WorkTimeDefinition != null)
            {
                using (var ds = (SQLDataService)DataServiceProvider.DataService)
                {
                    IQueryable<WorkTimeSpan> wtsQuery = ds.Query<WorkTimeSpan>();
                    IQueryable<WorkTimeSpan> query = wtsQuery.Where<WorkTimeSpan>(w => w.WorkTimeDefinition == updatedObject.WorkTimeDefinition);
                    List<DataObject> wtsList = query.Cast<DataObject>().ToList();
                    foreach (DataObject wts in wtsList)
                    {
                        wts.SetStatus(ObjectStatus.Deleted);
                    }
                    var dataObjects = wtsList.ToArray();
                    ds.UpdateObjects(ref dataObjects);
                }   
            }    
        }
        // *** Start programmer edit section *** (OnUpdateWorkTimeDefinition CustomAttributes)
        /// <summary>
        /// 
        /// </summary>
        /// <param name="UpdatedObject"></param>
        /// <returns></returns>
        // *** End programmer edit section *** (OnUpdateWorkTimeDefinition CustomAttributes)
        public virtual ICSSoft.STORMNET.DataObject[] OnUpdateWorkTimeDefinition(IIS.BusinessCalendar.WorkTimeDefinition UpdatedObject)
        {
            // *** Start programmer edit section *** (OnUpdateWorkTimeDefinition)
            if(UpdatedObject.GetStatus() == ICSSoft.STORMNET.ObjectStatus.Altered)
            {

            }
            return new ICSSoft.STORMNET.DataObject[0];
            // *** End programmer edit section *** (OnUpdateWorkTimeDefinition)
        }
    }
}
