/*flexberryautogenerated="false"*/

namespace IIS.BusinessCalendar
{
    using ICSSoft.STORMNET;
    using ICSSoft.STORMNET.Security;
    using ICSSoft.STORMNET.Business;
    using ICSSoft.STORMNET.Business.LINQProvider;
    using ICSSoft.STORMNET.Web.Controls;
    using System.Collections.Generic;
    using ICSSoft.STORMNET.Collections;
    using System.Linq;

    using System;
    using ICSSoft.STORMNET.Web.AjaxControls;
    
    public partial class ExceptionDayE : BaseEditForm<ExceptionDay>
    {
        /// <summary>
        /// Конструктор формы.
        /// </summary>
        public ExceptionDayE()
            : base(ExceptionDay.Views.ExceptionDayE)
        {
        }

        /// <summary>
        /// Путь до формы.
        /// </summary>
        public static string FormPath
        {
            get { return "~/forms/ExceptionDay/ExceptionDayE.aspx"; }
        }

        /// <summary>
        /// Вызывается самым первым в Page_Load.
        /// </summary>
        protected override void Preload()
        {
            
        }

        /// <summary>
        /// Здесь лучше всего писать бизнес-логику, оперируя только объектом данных.
        /// </summary>
        protected override void PreApplyToControls()
        {
        }

        /// <summary>
        /// Здесь лучше всего изменять свойства контролов на странице,
        /// которые не обрабатываются WebBinder.
        /// </summary>
        protected override void PostApplyToControls()
        {
            if (Request["DisableCloseBtn"] != null)
            {
                bool closeBtnDisabled = Request["DisableCloseBtn"] == "true";
                if (closeBtnDisabled)
                {
                    CancelBtn.Visible = false;
                }
            }
            if (Request["DisableSaveAndCloseBtn"] != null)
            {
                bool saveAndCloseBtnDisabled = Request["DisableSaveAndCloseBtn"] == "true";
                if (saveAndCloseBtnDisabled)
                {
                    SaveAndCloseBtn.Visible = false;
                }
            }
            if((Request["date"] != null)&&(DataObject == null))
            {
                ctrlStartDate.Value = new DateTime(1970, 1, 1, 0, 0, 0)
                                    .AddMilliseconds(Convert.ToInt64(Request["date"]));
                ctrlEndDate.Value = new DateTime(1970, 1, 1, 0, 0, 0)
                    .AddMilliseconds(Convert.ToInt64(Request["date"]));
            }
            var sm = DataServiceProvider.DataService.SecurityManager;
            if (!(sm.AccessObjectCheck(typeof(ExceptionDay), tTypeAccess.Update, false) || sm.AccessObjectCheck(typeof(ExceptionDay), tTypeAccess.Full, false)))
            {
                SaveAndCloseBtn.Visible = false;
                SaveBtn.Visible = false;
                ctrlDayType.Enabled = false;
                ctrlRecurrenceType.Enabled = false;
                ctrlName.Enabled = false;
                ctrlStartDate.Enabled = false;
                ctrlEndDate.Enabled = false;
                ctrlRecurrenceCount.Enabled = false;
                ctrlRepeatStep.Enabled = false;
                ctrlWorkTimeSpans.ReadOnly = true;
            }
            Page.Validate();
        }

        /// <summary>
        /// Вызывается самым последним в Page_Load.
        /// </summary>
        protected override void Postload()
        {
            ICSSoft.STORMNET.Web.Tools.PageContentManager.AttachExternalFile("/shared/script/jquery-1.7.2.min.js");
            ICSSoft.STORMNET.Web.Tools.PageContentManager.AttachExternalFile("/JavaScript/validation.js");
            ICSSoft.STORMNET.Web.Tools.PageContentManager.AttachExternalFile("/JavaScript/exception-day-form.js");
        }

        /// <summary>
        /// Валидация объекта для сохранения.
        /// </summary>
        /// <returns>true - продолжать сохранение, иначе - прекратить.</returns>
        protected override bool PreSaveObject()
        {
            return base.PreSaveObject();
        }

        /// <summary>
        /// Нетривиальная логика сохранения объекта.
        /// </summary>
        /// <returns>Объект данных, который сохранился.</returns>
        protected override DataObject SaveObject()
        {
            if((DataObject != null) && ((DataObject.GetStatus() == ObjectStatus.Created)|| (ctrlWorkTimeSpans.Status == ObjectStatus.Altered)))
            {   
                using (var ds = (SQLDataService)DataServiceProvider.DataService)
                {
                    object calendarID = Session["CalendarID"];
                    Calendar calendar = ds.Query<Calendar>()
                                                    .Where(c => c.__PrimaryKey == calendarID)
                                                    .First();
                    ds.LoadObject(calendar);
                    DataObject.Calendar = calendar;
                }
                TSSaveHelper.UpdateTimeSpans(DataObject);
            }
            return base.SaveObject();
        }
        protected override void PostSaveObject()
        {
            try
            {
                bool openModal = "true".Equals(Request["_flex-md"], StringComparison.InvariantCultureIgnoreCase);
                if (openModal)
                {
                    Response.Redirect("/forms/ExceptionDayRedirecter.aspx?ReturnURL=" + Request["ReturnURL"]);
                }
            }
            catch (System.NullReferenceException)
            {
                throw;
            }
            base.PostSaveObject();
        }
    }
}