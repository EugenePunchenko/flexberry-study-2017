/*flexberryautogenerated="false"*/

namespace IIS.BusinessCalendar
{
    using ICSSoft.STORMNET;
    using ICSSoft.STORMNET.Web.Controls;
    using ICSSoft.STORMNET.Web.Tools;
    using System.Collections.Generic;
    using System.Linq;
    using System.Web.UI.WebControls;
    using System.Web.Script.Serialization;
    using IIS.BusinessCalendar.forms;

    public partial class ExceptionDayE : BaseEditForm<ExceptionDay>
    {
        /// <summary>
        /// Конструктор формы.
        /// </summary>
        public ExceptionDayE()
            : base(ExceptionDay.Views.ExceptionDayE)
        {
        }

        /// <summary>
        /// Путь до формы.
        /// </summary>
        public static string FormPath
        {
            get { return "~/forms/ExceptionDay/ExceptionDayE.aspx"; }
        }

        /// <summary>
        /// Вызывается самым первым в Page_Load.
        /// </summary>
        protected override void Preload()
        {
        }

        /// <summary>
        /// Здесь лучше всего писать бизнес-логику, оперируя только объектом данных.
        /// </summary>
        protected override void PreApplyToControls()
        {
        }

        /// <summary>
        /// Здесь лучше всего изменять свойства контролов на странице,
        /// которые не обрабатываются WebBinder.
        /// </summary>
        protected override void PostApplyToControls()
        {
            if (!Page.IsPostBack)
            {
                this.BindGrid();
                
            }
            else
            {
                var jsArray = Request.Form.GetValues("wtsJsonArray")[0];
                JavaScriptSerializer ser = new JavaScriptSerializer();
                List<WorkTimeSpanShort> wtsList = ser.Deserialize<List<WorkTimeSpanShort>>(jsArray);
                if (DataObject != null)
                {
                    DataObject.WorkTimeSpans = wtsList;
                }
            }
            Page.Validate();
        }

        /// <summary>
        /// Вызывается самым последним в Page_Load.
        /// </summary>
        protected override void Postload()
        {
        }

        /// <summary>
        /// Валидация объекта для сохранения.
        /// </summary>
        /// <returns>true - продолжать сохранение, иначе - прекратить.</returns>
        protected override bool PreSaveObject()
        {
            return base.PreSaveObject();
        }

        /// <summary>
        /// Нетривиальная логика сохранения объекта.
        /// </summary>
        /// <returns>Объект данных, который сохранился.</returns>
        protected override DataObject SaveObject()
        {
            return base.SaveObject();
        }

        protected void BindGrid()
        {
            if(DataObject != null)
            {
                if(DataObject.WorkTimeDefinition != null)
                {
                    ICSSoft.STORMNET.Business.DataServiceProvider.DataService.LoadObject(WorkTimeDefinition.Views.WorkTimeDefinitionE, DataObject.WorkTimeDefinition, false, false);
                    List<WorkTimeSpan> wts = DataObject.WorkTimeDefinition.WorkTimeSpan.Cast<WorkTimeSpan>().ToList();

                    var jsonSerializer = new JavaScriptSerializer();
                    List<WorkTimeSpanShort> wtsShort = JSONHelper.convertWorkTimeSpans(DataObject.WorkTimeDefinition.WorkTimeSpan.Cast<WorkTimeSpan>());
                    var wtsJSON = jsonSerializer.Serialize(wtsShort);
                    wtsLiteral.Text = string.Concat("<input type='hidden' name='wtsJsonArray' id='wtsJson' value='", wtsJSON.ToString(), "'/>");
                }  
            } 
        }
      
    }
}