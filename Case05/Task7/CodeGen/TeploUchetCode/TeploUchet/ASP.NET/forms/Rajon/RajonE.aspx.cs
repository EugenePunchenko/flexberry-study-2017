/*flexberryautogenerated="false"*/

namespace TeploCorp.TeploUchet
{
    using ICSSoft.STORMNET;
    using ICSSoft.STORMNET.Web.Controls;
    using System.Web;
    using ICSSoft.STORMNET.Business;
    using ICSSoft.STORMNET.Business.LINQProvider;
    using System.Linq;

    public partial class РайонE : BaseEditForm<Район>
    {
        /// <summary>
        /// Конструктор формы.
        /// </summary>
        public РайонE()
            : base(Район.Views.РайонE)
        {
        }

        /// <summary>
        /// Путь до формы.
        /// </summary>
        public static string FormPath
        {
            get { return "~/forms/Rajon/RajonE.aspx"; }
        }

        /// <summary>
        /// Вызывается самым первым в Page_Load.
        /// </summary>
        protected override void Preload()
        {
            string strUser = HttpContext.Current.User.Identity.Name; //логин пользователя
            var _dataService = (SQLDataService)DataServiceProvider.DataService; //сервис для получения объекта
            var _Inspector = _dataService.Query<Инспектор>(Инспектор.Views.ИнспекторL).FirstOrDefault(x => x.Логин == strUser); // получаем объект инспектор по логину

            //если есть инспектор с таким логином 
            //ограничиваем по его району
            if (_Inspector != null)
            {
                ctrlАктуален.Visible = false;
                ctrlАктуаленLabel.Visible = false;
            }
            
        }

        /// <summary>
        /// Здесь лучше всего писать бизнес-логику, оперируя только объектом данных.
        /// </summary>
        protected override void PreApplyToControls()
        {
        }

        /// <summary>
        /// Здесь лучше всего изменять свойства контролов на странице,
        /// которые не обрабатываются WebBinder.
        /// </summary>
        protected override void PostApplyToControls()
        {
            Page.Validate();
        }

        /// <summary>
        /// Вызывается самым последним в Page_Load.
        /// </summary>
        protected override void Postload()
        {
        }

        /// <summary>
        /// Валидация объекта для сохранения.
        /// </summary>
        /// <returns>true - продолжать сохранение, иначе - прекратить.</returns>
        protected override bool PreSaveObject()
        {
            
                return base.PreSaveObject();
        }

        /// <summary>
        /// Нетривиальная логика сохранения объекта.
        /// </summary>
        /// <returns>Объект данных, который сохранился.</returns>
        protected override DataObject SaveObject()
        {
            return base.SaveObject();
        }
    }
}