/*flexberryautogenerated="false"*/

namespace TeploCorp.TeploUchet
{
    using ICSSoft.STORMNET;
    using ICSSoft.STORMNET.Web.Controls;
    using System.Web;
    using ICSSoft.STORMNET.FunctionalLanguage.SQLWhere;
    using ICSSoft.STORMNET.Business;
    using ICSSoft.STORMNET.Business.LINQProvider;
    using System.Linq;
    using ICSSoft.STORMNET.FunctionalLanguage;
    using ICSSoft.STORMNET.Web.AjaxControls;
    using System;

    public partial class ОбъектE : BaseEditForm<Объект>
    {
        /// <summary>
        /// Конструктор формы.
        /// </summary>
        public ОбъектE()
            : base(Объект.Views.ОбъектE)
        {
        }

        /// <summary>
        /// Путь до формы.
        /// </summary>
        public static string FormPath
        {
            get { return "~/forms/Ob'ekt/Ob'ektE.aspx"; }
        }

        /// <summary>
        /// Вызывается самым первым в Page_Load.
        /// </summary>
        protected override void Preload()
        {
            ctrlЛицСчет.Max = Int32.MaxValue;
            ctrlЛицСчет.Min = 0;
            ctrlПлощадь.Max = Int32.MaxValue;
            ctrlПлощадь.Min = 0;
            ctrlЛицСчет.MaxLength = 9;
            
        }

        /// <summary>
        /// Здесь лучше всего писать бизнес-логику, оперируя только объектом данных.
        /// </summary>
        protected override void PreApplyToControls()
        {
            //ctrlЗдание.EnableViewState = false;
            //AjaxGroupEdit.GetControlForEdit(ctrlЗдание, input,)
            //ctrlЗдание.PropertyToShow.en = false;
        }

        /// <summary>
        /// Здесь лучше всего изменять свойства контролов на странице,
        /// которые не обрабатываются WebBinder.
        /// </summary>
        protected override void PostApplyToControls()
        {/*
            if (ctrlЛицСчет.Text != "" && ctrlЛицСчет.Text != null)
            {
                try
                {
                    //int u = int.Parse(ctrlЛицСчет.Text);
                    ulong p = ulong.Parse(ctrlЛицСчет.Text);
                    //return base.PreSaveObject();
                }
                catch
                {
                    ctrlЛицСчет.Text = null;
                    WebMessageBox.Show("Проверьте номер лицевого счета, допустимы только цифры!");
                    ctrlЛицСчетValidator.IsValid = false;
                }
            }
            */
            
            ctrlЗдание.PropertyToShow = Information.ExtractPropertyPath<Здание>(x => x.Адрес);
            Page.Validate();
        }

        /// <summary>
        /// Вызывается самым последним в Page_Load.
        /// </summary>
        protected override void Postload()
        {
            if (ctrlЛицСчет.StringValue == "0")
            {
                ctrlЛицСчет.StringValue = null;
                ctrlЛицСчетValidator.IsValid = false;
            }
            
            if (ctrlПлощадь.StringValue == "0")
            {
                ctrlПлощадь.Text = null;
                ctrlПлощадьValidator.IsValid = false;
            }

            string strUser = HttpContext.Current.User.Identity.Name;
            var _dataService = (SQLDataService)DataServiceProvider.DataService;
            var _Inspector = _dataService.Query<Инспектор>(Инспектор.Views.ИнспекторL).FirstOrDefault(x => x.Логин == strUser); // получаем объект инспектор по логину

            if (_Inspector != null)
            {
                SQLWhereLanguageDef langdef = SQLWhereLanguageDef.LanguageDef;
                string strDistrictName = _Inspector.Район.Название; //название района инспектора

                Function lf = langdef.GetFunction(langdef.funcAND,
                                    langdef.GetFunction(langdef.funcEQ,
                                        new VariableDef(langdef.StringType, Information.ExtractPropertyPath<Здание>(x => x.Район.Название)),
                                        strDistrictName),
                                    langdef.GetFunction(langdef.funcEQ,
                                        new VariableDef(langdef.StringType, Information.ExtractPropertyPath<Здание>(x => x.Актуален)),
                                        true));
                ctrlЗдание.LimitFunction = lf;
            };
        }

        /// <summary>
        /// Валидация объекта для сохранения.
        /// </summary>
        /// <returns>true - продолжать сохранение, иначе - прекратить.</returns>
        protected override bool PreSaveObject()
        {
            return base.PreSaveObject();
        }

        /// <summary>
        /// Нетривиальная логика сохранения объекта.
        /// </summary>
        /// <returns>Объект данных, который сохранился.</returns>
        protected override DataObject SaveObject()
        {
            return base.SaveObject();
        }
    }
}