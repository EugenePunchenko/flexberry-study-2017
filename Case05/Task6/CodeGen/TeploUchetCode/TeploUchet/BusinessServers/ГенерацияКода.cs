//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TeploCorp.TeploUchet
{
    using System;
    using System.Xml;
    using ICSSoft.STORMNET;
    using ICSSoft.STORMNET.Business;
    using ICSSoft.STORMNET.Business.LINQProvider;
    using System.Linq;
    using Task1.Objects;
    using Logic;

    // *** Start programmer edit section *** (Using statements)

    // *** End programmer edit section *** (Using statements)


    /// <summary>
    /// Генерация кода.
    /// </summary>
    // *** Start programmer edit section *** (ГенерацияКода CustomAttributes)

    // *** End programmer edit section *** (ГенерацияКода CustomAttributes)
    [ICSSoft.STORMNET.AccessType(ICSSoft.STORMNET.AccessType.none)]
    public class ГенерацияКода : ICSSoft.STORMNET.Business.BusinessServer
    {
        
        // *** Start programmer edit section *** (ГенерацияКода CustomMembers)

        // *** End programmer edit section *** (ГенерацияКода CustomMembers)

        
        // *** Start programmer edit section *** (OnUpdateОбъект CustomAttributes)

        // *** End programmer edit section *** (OnUpdateОбъект CustomAttributes)
        public virtual ICSSoft.STORMNET.DataObject[] OnUpdateОбъект(TeploCorp.TeploUchet.Объект UpdatedObject)
        {
            // *** Start programmer edit section *** (OnUpdateОбъект)
            var ds = (SQLDataService)DataServiceProvider.DataService;
            if (UpdatedObject.GetStatus() == ObjectStatus.Created || UpdatedObject.GetStatus() == ObjectStatus.Altered)
            {
                var consumer = new Consumer()
                {
                    Name = UpdatedObject.Наименование,
                    Account = UpdatedObject.ЛицСчет,
                    DateReg = UpdatedObject.ДатаРегистрации
                };
                UpdatedObject.КодОбъекта = Logic1.GenerateCode(consumer);

                IDataService ids =  DataServiceProvider.DataService;
                
                var buildKey = UpdatedObject.Здание.__PrimaryKey;
                int OldПлощадь = 0;
                var noToSummObject = ds.Query<Объект>(Объект.Views.ОбъектE).Where(y => y.__PrimaryKey == UpdatedObject.__PrimaryKey).Where(y => y.Актуален == true);
                foreach (var j in noToSummObject)
                {
                    OldПлощадь = j.Площадь;
                };
                if (UpdatedObject.Площадь != OldПлощадь)
                {
                    //прибавляем новую площадь и вычитаем старую компенсируя потом прибавкой её из старых значений
                    UpdatedObject.Здание.Площади = UpdatedObject.Площадь - OldПлощадь;
                    //находим старые площади и прибавляем
                    var toSummObjects = ds.Query<Объект>(Объект.Views.ОбъектE).Where(y => y.Здание.__PrimaryKey == buildKey).Where(y => y.Актуален == true);
                    foreach (var j in toSummObjects)
                    {
                        UpdatedObject.Здание.Площади += j.Площадь;
                    };
                    ids.UpdateObject(UpdatedObject.Здание);
                }
            }
            
            //ставим флаг удален 
            if (UpdatedObject.GetStatus() == ObjectStatus.Deleted)
            {
                DataService.LoadObject(UpdatedObject);
                UpdatedObject.SetStatus(ObjectStatus.Altered);
                UpdatedObject.Актуален = false;

                //var ds = (SQLDataService)DataServiceProvider.DataService;
                var delObjects = ds.Query<Объект>(Объект.Views.ОбъектE).Where(k => k.Здание.__PrimaryKey == UpdatedObject.__PrimaryKey);
                foreach (var k in delObjects)
                {
                    k.SetStatus(ObjectStatus.Deleted);
                }
                return delObjects.ToArray();
            }

            return new ICSSoft.STORMNET.DataObject[0];
            // *** End programmer edit section *** (OnUpdateОбъект)
        }
    }
}
