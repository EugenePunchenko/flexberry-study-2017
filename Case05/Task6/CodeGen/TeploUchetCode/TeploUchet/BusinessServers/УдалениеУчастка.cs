//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TeploCorp.TeploUchet
{
    using System;
    using System.Xml;
    
    
    // *** Start programmer edit section *** (Using statements)
    using ICSSoft.STORMNET;
    using ICSSoft.STORMNET.Business;
    using ICSSoft.STORMNET.Business.LINQProvider;
    using System.Linq;

    // *** End programmer edit section *** (Using statements)


    /// <summary>
    /// Удаление участка.
    /// </summary>
    // *** Start programmer edit section *** (УдалениеУчастка CustomAttributes)

    // *** End programmer edit section *** (УдалениеУчастка CustomAttributes)
    [ICSSoft.STORMNET.AccessType(ICSSoft.STORMNET.AccessType.none)]
    public class УдалениеУчастка : ICSSoft.STORMNET.Business.BusinessServer
    {

        // *** Start programmer edit section *** (УдалениеУчастка CustomMembers)

        // *** End programmer edit section *** (УдалениеУчастка CustomMembers)


        // *** Start programmer edit section *** (OnUpdateУчастокСети CustomAttributes)
        /// <summary>
        /// проверка есть ли дубли секторов в объекте по номеру и типу сети
        /// </summary>
        /// <param name="Type">
        /// тип участка
        /// </param>
        /// <param name="Number">
        /// номер участка
        /// </param>
        /// <param name="Obiekt">
        /// объект участка
        /// </param>
        public static Boolean check4double(ТипыСети Type, int Number, string Obiekt)
        {
            IDataService ids = DataServiceProvider.DataService;
            var ToCheckSectors = ids.Query<УчастокСети>(УчастокСети.Views.УчастокСетиE)
                                .Where(x => x.Объект.Наименование == Obiekt)
                                .Where(y => y.Актуален == true);

            foreach (var j in ToCheckSectors)
            {
                if (Number == j.Номер && Type == j.ТипСети)
                {
                    return true;
                }
            }
            return false;
        }
        /// <summary>
        /// возвращает ключи объектов которые повторяются в Л представлении
        /// для участков сетей
        /// </summary>
        /// <param name="val"></param>
        /// <returns></returns>
        public static string doubleKeys (string val)
        {
            IDataService ids = DataServiceProvider.DataService;
            //берем все актуальные
            var actual = ids.Query<УчастокСети>(УчастокСети.Views.УчастокСетиE)
                            .Where(y => y.Актуален == true);
            int textL = 0;
            //возможная длинна массива названий объектов( сумма ряда Н го порядка)
            for (int i = 1; i < actual.Count(x => x.Актуален == true);i++) { textL += i; };
            string[] text = new string[textL];
            textL = 0;

            //обращаемся к каждому актуальному
            foreach ( var i in actual )
            {
                //у кого объект совпадает по ключу
                //того сравниваем
                var toCompare = ids.Query<УчастокСети>(УчастокСети.Views.УчастокСетиE)
                                .Where(y => y.Объект.__PrimaryKey == i.Объект.__PrimaryKey)
                                .Where(y => y.__PrimaryKey != i.__PrimaryKey)
                                .Where(y => y.Актуален == true)
                                .Where(y => y.Номер == i.Номер)
                                .Where(y => y.ТипСети == i.ТипСети);
                
                //актуальный со сравниваемым 
                foreach (var j in toCompare)
                {
                    text[textL] = i.Объект.Наименование + ",";
                    textL++;
                }
            };

            //удаление повторов
            var distinctResult = text.Where(str => text.Count(s => s == str) > 1).Distinct();
            string resultText = "";
            //в одну строку объект строк
            foreach (var i in distinctResult)
            {
                try
                {
                    resultText += i.ToString();
                }
                catch { }
            }
            return resultText;
        }
        /// <summary>
        /// int Max Value
        /// </summary>
        public const Int32 MaxValue = 2147483647;
        /// <summary>
        /// int Min Value
        /// </summary>
        public const Int32 MinValue = -2147483648;

        // *** End programmer edit section *** (OnUpdateУчастокСети CustomAttributes)
        public virtual ICSSoft.STORMNET.DataObject[] OnUpdateУчастокСети(TeploCorp.TeploUchet.УчастокСети UpdatedObject)
        {
            // *** Start programmer edit section *** (OnUpdateУчастокСети)
            //ставим флаг удален 
            if (UpdatedObject.GetStatus() == ObjectStatus.Deleted)
            {
                // Не дадим объекту удалиться, но выставим флаг Актуальности.
                DataService.LoadObject(UpdatedObject);
                UpdatedObject.SetStatus(ObjectStatus.Altered);
                UpdatedObject.Актуален = false;

                var ds = (SQLDataService)DataServiceProvider.DataService;
                var delobjects = ds.Query<УчастокСети>(УчастокСети.Views.УчастокСетиE)
                            .Where(x => x.Объект.__PrimaryKey == UpdatedObject.__PrimaryKey);
                foreach (var i in delobjects)
                {
                    i.SetStatus(ObjectStatus.Deleted);
                }
                return delobjects.ToArray();
            }

            return new ICSSoft.STORMNET.DataObject[0];
            // *** End programmer edit section *** (OnUpdateУчастокСети)
        }
    }
}
