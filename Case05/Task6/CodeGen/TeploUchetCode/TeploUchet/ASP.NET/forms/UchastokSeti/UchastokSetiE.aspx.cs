/*flexberryautogenerated="false"*/

namespace TeploCorp.TeploUchet
{
    using ICSSoft.STORMNET;
    using ICSSoft.STORMNET.Web.Controls;
    using ICSSoft.STORMNET.Web.AjaxControls;
    using TeploUchet;
    using System;
    using System.Web.UI;
    using ICSSoft.STORMNET.Web.Tools;
    using System;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Web.UI;
    using System.Xml;
    using System.Xml.Linq;
    using System.Web.UI.WebControls;
    using TeploUchet;
    using System.Drawing;

    public partial class УчастокСетиE : BaseEditForm<УчастокСети>
    {
        /// <summary>
        /// Конструктор формы.
        /// </summary>
        public УчастокСетиE()
            : base(УчастокСети.Views.УчастокСетиE)
        {
        }

        /// <summary>
        /// Путь до формы.
        /// </summary>
        public static string FormPath
        {
            get { return "~/forms/UchastokSeti/UchastokSetiE.aspx"; }
        }

        /// <summary>
        /// Вызывается самым первым в Page_Load.
        /// </summary>
        protected override void Preload()
        {
        }

        /// <summary>
        /// Здесь лучше всего писать бизнес-логику, оперируя только объектом данных.
        /// </summary>
        protected override void PreApplyToControls()
        {
            //ctrlОбъект.PropertyToShow = Information.ExtractPropertyPath<Здание>(x => x.Адрес);
        }

        /// <summary>
        /// Здесь лучше всего изменять свойства контролов на странице,
        /// которые не обрабатываются WebBinder.
        /// </summary>
        protected override void PostApplyToControls()
        {
            ctrlОбъект.PropertyToShow = Information.ExtractPropertyPath<Объект>(x => x.Наименование);
            Page.Validate();
        }

        /// <summary>
        /// Вызывается самым последним в Page_Load.
        /// </summary>
        protected override void Postload()
        {
        }

        /// <summary>
        /// Валидация объекта для сохранения.
        /// </summary>
        /// <returns>true - продолжать сохранение, иначе - прекратить.</returns>
        protected override bool PreSaveObject()
        {
            int number = Convert.ToInt32(ctrlНомер.StringValue);
            ТипыСети type = ТипыСети.Внутренняя;
            if (WebBinder.GetBindedValue(ctrlТипСети).ToString() == "Внутренняя")
            {
                type = ТипыСети.Внутренняя;
            }
            else
            {
                type = ТипыСети.Наружная;
            }
            //var obiekt = WebBinder.GetBindedValue(ctrlОбъект).ToString();
            var obiekt = ctrlОбъект.PropertyToShowText;

            if ( УдалениеУчастка.chesk4doubleSector(type, number, obiekt) )
            {
                WebMessageBox.Show("Есть дубликат участка сети, пожалуйста проверьте данные!");
                ctrlОбъектLabel.ForeColor = Color.MediumVioletRed;
                ctrlНомерLabel.ForeColor = Color.MediumVioletRed;
                ctrlТипСетиLabel.ForeColor = Color.MediumVioletRed;
                ErrorPage = "Дубликат";
                return false;
            }
            else
            {
                return base.PreSaveObject();
            }
            //УдалениеУчастка.chesk4doubleSector(type, numer, ctrlОбъект);
            
        }

        /// <summary>
        /// Нетривиальная логика сохранения объекта.
        /// </summary>
        /// <returns>Объект данных, который сохранился.</returns>
        protected override DataObject SaveObject()
        {             
            return base.SaveObject();
        }
    }
}