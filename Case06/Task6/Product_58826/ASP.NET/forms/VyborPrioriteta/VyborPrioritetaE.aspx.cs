/*flexberryautogenerated="true"*/

namespace IIS.Product_58826
{
    using ICSSoft.STORMNET;
    using ICSSoft.STORMNET.Web.Controls;
    using ICSSoft.STORMNET.Web.AjaxControls;
    // *** Start programmer edit section *** (Using statements)
    using ICSSoft.STORMNET.Business;
    using System.Linq;
    using ICSSoft.STORMNET.Business.LINQProvider;   
    // *** End programmer edit section *** (Using statements)

    public partial class ВыборПриоритетаE : BaseEditForm<ВыборПриоритета>
    {
        /// <summary>
        /// Конструктор формы.
        /// </summary>
        public ВыборПриоритетаE()
            : base(ВыборПриоритета.Views.ВыборПриоритетаE)
        {
        }

        /// <summary>
        /// Путь до формы.
        /// </summary>
        public static string FormPath
        {
            get { return "~/forms/VyborPrioriteta/VyborPrioritetaE.aspx"; }
        }

        /// <summary>
        /// Вызывается самым первым в Page_Load.
        /// </summary>
        protected override void Preload()
        {
            // *** Start programmer edit section *** (Using statements)
            ctrlСтудент.MasterViewName = Студент.Views.СтудентL.Name;
            ctrlМодуль.MasterViewName = Модуль.Views.МодульL.Name;
            
            // *** End programmer edit section *** (Using statements)
        }

        /// <summary>
        /// Здесь лучше всего писать бизнес-логику, оперируя только объектом данных.
        /// </summary>
        protected override void PreApplyToControls()
        {

            // *** Start programmer edit section *** (Using statements)             
                ctrlСтудент.PropertyToShow = Information.ExtractPropertyPath<Студент>(t => t.ФИО);
            var ds = (SQLDataService)DataServiceProvider.DataService;
            var actualStudents = ds.Query<Студент>(Студент.Views.СтудентL).Where(t => t.Обучается);
            ctrlСтудент.LimitFunction =
                LinqToLcs.GetLcs(actualStudents.Expression, Студент.Views.СтудентL).LimitFunction;

            ctrlМодуль.PropertyToShow = Information.ExtractPropertyPath<Модуль>(t => t.Название);
            ds = (SQLDataService)DataServiceProvider.DataService;
            var actualModules = ds.Query<Модуль>(Модуль.Views.МодульL).Where(t => t.Актуальность);
            ctrlМодуль.LimitFunction =
                LinqToLcs.GetLcs(actualModules.Expression, Модуль.Views.МодульL).LimitFunction;


            // *** End programmer edit section *** (Using statements)
        }

        /// <summary>
        /// Здесь лучше всего изменять свойства контролов на странице,
        /// которые не обрабатываются WebBinder.
        /// </summary>
        protected override void PostApplyToControls()
        {
            Page.Validate();
        }

        /// <summary>
        /// Вызывается самым последним в Page_Load.
        /// </summary>
        protected override void Postload()
        {
        }

        /// <summary>
        /// Валидация объекта для сохранения.
        /// </summary>
        /// <returns>true - продолжать сохранение, иначе - прекратить.</returns>
        protected override bool PreSaveObject()
        {
            return base.PreSaveObject();
        }

        /// <summary>
        /// Нетривиальная логика сохранения объекта.
        /// </summary>
        /// <returns>Объект данных, который сохранился.</returns>
        protected override DataObject SaveObject()
        {
            return base.SaveObject();
        }
    }
}