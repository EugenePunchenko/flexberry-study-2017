/*flexberryautogenerated="true"*/

namespace IIS.Product_58826
{
    using ICSSoft.STORMNET;
    using ICSSoft.STORMNET.Web.Controls;
    using ICSSoft.STORMNET.Web.AjaxControls;
    // *** Start programmer edit section *** (Using statements)
    using ICSSoft.STORMNET.Business;
    using System.Linq;
    using ICSSoft.STORMNET.Business.LINQProvider;
    // *** End programmer edit section *** (Using statements) 
    public partial class МодульE : BaseEditForm<Модуль>
    {
        /// <summary>
        /// Конструктор формы.
        /// </summary>
        public МодульE()
            : base(Модуль.Views.МодульE)
        {
        }

        /// <summary>
        /// Путь до формы.
        /// </summary>
        public static string FormPath
        {
            get { return "~/forms/Modul/ModulE.aspx"; }
        }

        /// <summary>
        /// Вызывается самым первым в Page_Load.
        /// </summary>
        protected override void Preload()
        {
            // *** Start programmer edit section *** (Using statements)  
            ctrlСеместр.MasterViewName = Семестр.Views.СеместрL.Name;
            ctrlОрганизация.MasterViewName = Организация.Views.ОрганизацияL.Name;
            // *** End programmer edit section *** (Using statements)
        }

        /// <summary>
        /// Здесь лучше всего писать бизнес-логику, оперируя только объектом данных.
        /// </summary>
        protected override void PreApplyToControls()
        {
            // *** Start programmer edit section *** (Using statements)  
            ctrlСеместр.PropertyToShow = Information.ExtractPropertyPath<Семестр>(t => t.Номер);
            var ds = (SQLDataService)DataServiceProvider.DataService;
            var actualSemesters = ds.Query<Семестр>(Семестр.Views.СеместрL).Where(t => t.Актуальность);
            ctrlСеместр.LimitFunction =
                LinqToLcs.GetLcs(actualSemesters.Expression, Семестр.Views.СеместрL).LimitFunction;

            ctrlОрганизация.PropertyToShow = Information.ExtractPropertyPath<Организация>(t => t.Актуальность);
            ds = (SQLDataService)DataServiceProvider.DataService;
            var actualOrganizations = ds.Query<Организация>(Организация.Views.ОрганизацияL).Where(t => t.Актуальность);
            ctrlОрганизация.LimitFunction =
                LinqToLcs.GetLcs(actualOrganizations.Expression, Организация.Views.ОрганизацияL).LimitFunction;
            // *** End programmer edit section *** (Using statements)
        }

        /// <summary>
        /// Здесь лучше всего изменять свойства контролов на странице,
        /// которые не обрабатываются WebBinder.
        /// </summary>
        protected override void PostApplyToControls()
        {
            Page.Validate();
        }

        /// <summary>
        /// Вызывается самым последним в Page_Load.
        /// </summary>
        protected override void Postload()
        {
        }

        /// <summary>
        /// Валидация объекта для сохранения.
        /// </summary>
        /// <returns>true - продолжать сохранение, иначе - прекратить.</returns>
        protected override bool PreSaveObject()
        {
            return base.PreSaveObject();
        }

        /// <summary>
        /// Нетривиальная логика сохранения объекта.
        /// </summary>
        /// <returns>Объект данных, который сохранился.</returns>
        protected override DataObject SaveObject()
        {
            return base.SaveObject();
        }
    }
}