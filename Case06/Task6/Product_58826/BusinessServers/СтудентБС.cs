//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IIS.Product_58826
{
    using System;
    using System.Xml;
    
    
    // *** Start programmer edit section *** (Using statements)
    using ICSSoft.STORMNET.Business;
    using System.Linq;
    using ICSSoft.STORMNET.Business.LINQProvider;
    using System.Collections;
    using System.Collections.Generic;
    // *** End programmer edit section *** (Using statements)
    // OrmSample ormSample = new OrmSample(dataService);

///   LoadObject(ICSSoft.STORMNET.DataObject запись, DataObjectCache DataObjectCache);
    /// <summary>
    /// Сетевые о бразовательные программы.
    /// </summary>
    // *** Start programmer edit section *** (СтудентБС CustomAttributes)
    // using ICSSoft.STORMNET;
    // *** End programmer edit section *** (СтудентБС CustomAttributes)
    [ICSSoft.STORMNET.AccessType(ICSSoft.STORMNET.AccessType.none)]
    public class СтудентБС : ICSSoft.STORMNET.Business.BusinessServer
    {

        // *** Start programmer edit section *** (СтудентБС CustomMembers)

        // *** End programmer edit section *** (СтудентБС CustomMembers)


        // *** Start programmer edit section *** (OnUpdateСтудент CustomAttributes)

        // *** End programmer edit section *** (OnUpdateСтудент CustomAttributes)
        public virtual ICSSoft.STORMNET.DataObject[] OnUpdateСтудент(IIS.Product_58826.Студент UpdatedObject)
        {
            ArrayList retObjs = new ArrayList();
            // *** Start programmer edit section *** (OnUpdateСтудент)

            if (UpdatedObject.GetStatus() == ICSSoft.STORMNET.ObjectStatus.Created)
            {

                if (UpdatedObject.Обучается == true)
                {

                    if (UpdatedObject.Пароль.Length < 8)
                    {
                        throw new Exception("Длина пароля должна быть не менее 8 символов!");
                    }

                    var array = ((SQLDataService)DataService).Query<Студент>(Студент.Views.СтудентE).Where(k => k.__PrimaryKey != UpdatedObject.__PrimaryKey).Where(k => k.Обучается == true).ToArray();
                    foreach (var arr in array)
                    {
                        if (UpdatedObject.Обучается == true)
                        {
                            if (arr.Логин == UpdatedObject.Логин)
                            {
                                throw new Exception("Такой логин уже существует!");
                            }
                            if ((arr.ФИО == UpdatedObject.ФИО) && (arr.ДатаРождения == UpdatedObject.ДатаРождения) && (arr.АдресПочты == UpdatedObject.АдресПочты))
                            {
                                throw new Exception("Такой студент уже существует!");
                            }
                        }
                    }


                    var semesters = ((SQLDataService)DataService).Query<Семестр>(Семестр.Views.СеместрE).Where(k => k.Актуальность == true).ToArray();

                    for (var i = 0; i < semesters.Length; i++)
                    {
                        var moduls = ((SQLDataService)DataService).Query<Модуль>(Модуль.Views.МодульE).Where(k => k.Актуальность == true).Where(k => k.Семестр.Номер == semesters[i].Номер).ToArray();
                        for (var j = 0; j < moduls.Length; j++)
                        {
                            IDataService ds = DataServiceProvider.DataService;
                            var запись = new ВыборПриоритета { Приоритет = j + 1, Модуль = moduls[j], Актуальность = true, МодульВыбран = false, Студент = UpdatedObject };
                            retObjs.Add(запись);
                        }
                    }
                }

                var ret = new ICSSoft.STORMNET.DataObject[retObjs.Count];
                retObjs.CopyTo(ret, 0);
                return ret;
            }

            if (UpdatedObject.GetStatus() == ICSSoft.STORMNET.ObjectStatus.Deleted)
            {
                 DataService.LoadObject(UpdatedObject);
                UpdatedObject.SetStatus(ICSSoft.STORMNET.ObjectStatus.Altered);
                UpdatedObject.Обучается = false;

                var approve = ((SQLDataService)DataService).Query<ВыборПриоритета>(ВыборПриоритета.Views.ВыборПриоритетаE).Where(k => k.Студент.__PrimaryKey == UpdatedObject.__PrimaryKey).ToArray();

                foreach (var app in approve)
                {
                    app.SetStatus(ICSSoft.STORMNET.ObjectStatus.Deleted);
                }

                return approve;
            }


            if (UpdatedObject.GetStatus() == ICSSoft.STORMNET.ObjectStatus.Altered)
            {
                if (UpdatedObject.Пароль.Length < 8)
                {
                    throw new Exception("Длина пароля должна быть не менее 8 символов!");
                }

                var array = ((SQLDataService)DataService).Query<Студент>(Студент.Views.СтудентE).Where(k => k.__PrimaryKey != UpdatedObject.__PrimaryKey).Where(k => k.Обучается == true).ToArray();
                foreach (var arr in array)
                {
                    if (UpdatedObject.Обучается == true)
                    {
                        if (arr.Логин == UpdatedObject.Логин)
                        {
                            throw new Exception("Такой логин уже существует!");
                        }
                        if ((arr.ФИО == UpdatedObject.ФИО) && (arr.ДатаРождения == UpdatedObject.ДатаРождения) && (arr.АдресПочты == UpdatedObject.АдресПочты))
                        { 
                            throw new Exception("Такой студент уже существует!");
                        }
                    }
                }
            }

                return new ICSSoft.STORMNET.DataObject[0];
            // *** End programmer edit section *** (OnUpdateСтудент)
        }
    }
}
